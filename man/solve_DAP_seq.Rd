% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solve_DAP_seq.R
\name{solve_DAP_seq}
\alias{solve_DAP_seq}
\title{Solves DAP optimization problem for a given sequence of lambda values}
\usage{
solve_DAP_seq(X1, X2, lambda_seq, eps = 1e-04, maxiter = 10000,
  feature_max = nrow(X1) + nrow(X2))
}
\arguments{
\item{X1}{A n1 x p matrix of group 1 data (scaled).}

\item{X2}{A n2 x p matrix of group 2 data (scaled).}

\item{lambda_seq}{A supplied sequence of tunning parameters.}

\item{eps}{Convergence threshold for the block-coordinate decent algorithm based on the maximum element-wise change in \eqn{V}. The default is 1e-4.}

\item{maxiter}{Maximum number of iterations, the default is 10000.}

\item{feature_max}{The maximum number of features that can be
selected. Default is the total sample size. Once the maximum is
reached, the function will return the results and larger lambda
values won't be applied.}
}
\value{
A list of
       \item{V1_mat}{A matrix of the first projection vector V1
       corresponding to the sequence of lambda.}
       \item{V2_mat}{A matrix of the second projection vector V2
       corresponding to the sequence of lambda.}
       \item{lambda_seq}{The sequence of lambda that has been
       applied to the data.}
       \item{nfeature_vec}{A sequence of number of selected
       features.}
}
\description{
Uses block-coordinate descent algorithm with warm initializations, starts with the maximal supplied lambda value.
}
\examples{
## This is an example for solve_DAP_seq

## Generate data
n_train = 50
n_test = 50
p = 100
mu1 = rep(0, p)
mu2 = rep(3, p)
Sigma1 = diag(p)
Sigma2 = 0.5* diag(p)

## Build training data
x1 = MASS::mvrnorm(n = n_train, mu = mu1, Sigma = Sigma1)
x2 = MASS::mvrnorm(n = n_train, mu = mu2, Sigma = Sigma2)
xtrain = rbind(x1, x2)
ytrain = c(rep(1, n_train), rep(2, n_train))

## Standardize the data
out_s = standardizeData(xtrain, ytrain, center = F)

####use solve_proj_seq
fit = solve_DAP_seq(X1 = out_s$X1, X2 = out_s$X2, lambda_seq = c(0.2, 0.3, 0.5, 0.7, 0.9))
}
