% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv_DAP.R
\name{cv_DAP}
\alias{cv_DAP}
\title{Cross-validation for DAP}
\usage{
cv_DAP(X, Y, lambda_seq, nfolds = 5, eps = 1e-04, m_max = 1000,
  myseed = 1001, prior = TRUE)
}
\arguments{
\item{X}{Training data set. No need for standardization.}

\item{Y}{Training labels, either "1" or "2".}

\item{lambda_seq}{A sequence of tunning parameter, lambda.}

\item{nfolds}{Set folds number for cross-validation. Default is 5.}

\item{eps}{Convergence threshold for block-coordinate decent
algorithm. Each block-coordinate decent algorithm loop continuoues
until the maximum iteration number exceeds \code{maxiter} or the
maximum element-wise change in \eqn{V} is less than \code{eps}.
Default is 1e-4.}

\item{m_max}{Maximum number of iterations. Default is 10000.}

\item{myseed}{Seed for random spliting the data set into traininf
and testing. Default seed is 1001.}

\item{prior}{If "TRUE", the proportions for the training set will
be used to adjust the classification rule. Default is "TRUE".}
}
\value{
A list with following component:
       \item{lambda_min}{Value of \code{lambda} corresponding to
       the minimum \code{cvm}.}
       \item{lambda_1se}{The largest value of \code{lambda} such
       that the error is within 1 standard error of the minimum
       \code{cvm}.}
       \item{cvm}{The mean of k-fold cross-validation error
       with respect to the sequence of \code{lambda}.}
       \item{cvse}{The estimate of standard error of \code{cvm}.}
       \item{lambda_seq}{The sequence of \code{lambda} used in the
       fits.}
       \item{nfeature_mat}{The matrix of the number of selected
        features with respect to \code{lambda} sequence.}
       \item{error_mat}{The matrix of the fitting errors
        with respect to \code{lambda} sequence.}
}
\description{
Does k-fold cross-validation for DAP.
}
\examples{
## This is an example for cv_DAP

## Generate data
n1 = n2 = 50
n_test = 50
p = 100
mu1 = rep(0, p)
mu2 = rep(3, p)
Sigma1 = diag(p)
Sigma2 = 0.5* diag(p)

## Build training data and test data
x1 = MASS::mvrnorm(n = n1, mu = mu1, Sigma = Sigma1)
x2 = MASS::mvrnorm(n = n2, mu = mu2, Sigma = Sigma2)
y1 = rep(1, n1)
y2 = rep(2, n2)
xtrain <- rbind(x1, x2)
ytrain <- c(rep(1, n1), rep(2, n2))

## Apply cv_DAP
fit = cv_DAP(X = xtrain, Y = ytrain, lambda_seq = c(0.2, 0.3, 0.5, 0.7, 0.9))
}
